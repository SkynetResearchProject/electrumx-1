Setup ElectrumX Server
An SPV Electrum Server is a server that provides "lite mode" type functionality. These servers run a full node, which maintains a copy of a blockchain's history (a.k.a.) "native mode". The electrum software allows developers and apps like AtomicDEX to communicate with the blockchain to query balances, transaction history or broadcast signed transactions without needing to download and sync the full chain locally.

A list of known electrum servers is maintained at ???https://github.com/KomodoPlatform/coins/tree/master/electrums It's recommended to run at least 2 - 3 electrum servers to ensure stable operation.

Check out the ElectrumX Docs (opens new window)for more info.

#Installation
sudo apt-get install python3-setuptools python3-multidict python3.9 libleveldb-dev
cd ~
sudo git clone https://github.com/KomodoPlatform/electrumx-1
cd ~/electrumx-1
sudo pip3.9 install .
sudo pip3.9 install .[uvloop,ujson]
#Coin Configuration
If you are launching the electrum server for a new smartchain, you will have to add it to the ~/electrumx-1/electrumx/lib/coins.py file. You can skip this step if seeting up an electrum server for KMD or another coin which already exists in this file.

For example, using the Skyrcoin Smart Chain (lib/coins.py):

class Skyrcoin(Coin):
    NAME = "Skyrcoin"
    SHORTNAME = "SKYR"
    NET = "mainnet"
    XPUB_VERBYTES = bytes.fromhex("0488b21e")
    XPRV_VERBYTES = bytes.fromhex("0488ade4")
    GENESIS_HASH = '0000067136024464e0622d0ffdac12d98e14a36e78ad27323c3f5c2c98854a75'
    P2PKH_VERBYTE = bytes.fromhex("19")
    P2SH_VERBYTE = bytes.fromhex("1c")
    WIF_BYTE = bytes.fromhex("99")
    DESERIALIZER = lib_tx.DeserializerPIVX
    TX_COUNT_HEIGHT = 631060
    TX_COUNT = 1262158
    TX_PER_BLOCK = 4
    STATIC_BLOCK_HEADERS = False
    RPC_PORT = 16890
    REORG_LIMIT = 1000
    EXPANDED_HEADER = 112
    ZEROCOIN_START_HEIGHT = 1441
    ZEROCOIN_END_HEIGHT = 1641
    ZEROCOIN_BLOCK_VERSION = 4

    @classmethod
    def static_header_len(cls, height):
        '''Given a header height return its length.'''
        if (height >= cls.ZEROCOIN_START_HEIGHT and height < cls.ZEROCOIN_END_HEIGHT):
            return cls.EXPANDED_HEADER
        else:
            return cls.BASIC_HEADER_SIZE

    @classmethod
    def header_hash(cls, header):
        '''Given a header return the hash.'''
        version, = struct.unpack('<I', header[:4])
        #print("------------------------------------")
        #print("================version ", version)
        #print("================header ", len(header))
        #print("================header ", binascii.hexlify(header))
        if version >= cls.ZEROCOIN_BLOCK_VERSION:
            #print("super ",binascii.hexlify(super().header_hash(header)))
            #print("double ",binascii.hexlify(double_sha256(header)))
            return super().header_hash(header)
        else:
            import x11kvs_hash
            #print("+++x11kvs_hash ",binascii.hexlify(x11kvs_hash.getPoWHash(header)))
            return x11kvs_hash.getPoWHash(header)


class SkyrcoinTestnet(Skyrcoin):
    NET = "testnet"
    XPUB_VERBYTES = bytes.fromhex("0488b21e")
    XPRV_VERBYTES = bytes.fromhex("0488ade4")
    GENESIS_HASH = ('0x00000018d8b262ec1838bd6208766922f463259d627cb3c8032238c34de052fe')
    P2PKH_VERBYTE = bytes.fromhex("6F")
    P2SH_VERBYTE = bytes.fromhex("C4")
    WIF_BYTE = bytes.fromhex("EF")
    TX_PER_BLOCK = 4
    RPC_PORT = 26890
    ZEROCOIN_HEADER = 112
    ZEROCOIN_START_HEIGHT = 1441
    ZEROCOIN_END_HEIGHT = 1641

    @classmethod
    def static_header_len(cls, height):
        '''Given a header height return its length.'''
        if (height >= cls.ZEROCOIN_START_HEIGHT and height < cls.ZEROCOIN_END_HEIGHT):
            return cls.EXPANDED_HEADER
        else:
            return cls.BASIC_HEADER_SIZE			
			
    @classmethod
    def header_hash(cls, header):
        '''Given a header return the hash.'''
        version, = struct.unpack('<I', header[:4])
        #print("------------------------------------")
        #print("================version ", version)
        #print("================header ", len(header))
        #print("================header ", binascii.hexlify(header))
        if version >= cls.ZEROCOIN_BLOCK_VERSION:
            #print("super ",binascii.hexlify(super().header_hash(header)))
            #print("double ",binascii.hexlify(double_sha256(header)))
            return super().header_hash(header)
        else:
            import x11kvs_hash
            #print("+++x11kvs_hash ",binascii.hexlify(x11kvs_hash.getPoWHash(header)))
            return x11kvs_hash.getPoWHash(header)			
			
			

NAME, SHORTNAME and RPC_PORT are to be changed accordingly.


sudo git clone https://github.com/SkynetResearchProject/X11KVS-hash.git
cd X11KVS-hash
sudo python3 setup.py install










#Electrum Configuration


Run:

cd ~/electrumx-1

groupadd -r electrumx
useradd -r -m -d /var/lib/electrumx -k /dev/null -s /bin/false -g electrumx electrumx

sudo mkdir -p electrumdb
sudo chown electrumx:electrumx /opt/electrumx-1/electrumdb
sudo chown -R electrumx:electrumx electrumdb

sudo nano /etc/electrumx_skyr.conf
#or
sudo nano /etc/electrumx120_skyr.conf



Get your RPC_USER, RPC_PASS and RPC_PORT from your conf file, e.g. ~/.komodo/RICK/RICK.conf, then add them as below:

COIN = Skyrcoin
DB_DIRECTORY = /opt/electrumx-1/electrumdb/
DAEMON_URL = http://2RfZMheEX9:HGrFM3EM9IO9GEWMnStlQW@127.0.0.1:16890/
SERVICES = tcp://:50001,rpc://:8000
EVENT_LOOP_POLICY = uvloop
PEER_DISCOVERY = self
MAX_SESSIONS = 1000
MAX_SEND = 2000000000
INITIAL_CONCURRENT = 50
COST_SOFT_LIMIT = 0
COST_HARD_LIMIT = 0

BANDWIDTH_UNIT_COST = 10000

# Required for WSS or SSL services
#SSL_CERTFILE=/etc/letsencrypt/live/<YOUR_DOMAIN_NAME>/fullchain.pem   
#SSL_KEYFILE=/etc/letsencrypt/live/<YOUR_DOMAIN_NAME>/privkey.pem      




#SSL

You can read more about the available environment variables in the ElectrumX Docs(opens new window)

Change the SERVICES as required, and allow the SERVICES ports through your firewall. E.g. sudo ufw allow <ELECTRUM_WSS_PORT>

For listing on AtomicDEX, wss (websocket) and ssl (secure socket) will be required. Please refer to the EFF Certbot instructions (opens new window)for details on setting up SSL certificates (this varies depending on OS and installed web server).

For example, using Ubuntu 20.04 and NGINX:

sudo snap install core; sudo snap refresh core
sudo apt-get remove certbot
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
sudo certbot --nginx
Will create a cert file and key file, and update your nginx sites-enabled config. Add the path to these files in /etc/electrumx_skyr.conf.




#Configure as a service


Run:

sudo cp /opt/electrumx-1/contrib/systemd/electrumx.service /etc/systemd/system/electrumx_skyr.service
sudo nano /etc/systemd/system/electrumx_skyr.service


Update the following fields in the file (leave the rest as it is):

[Unit]
Description=Electrumx_skyr
After=network.target

[Service]
EnvironmentFile=/etc/electrumx_skyr.conf
ExecStart=/usr/local/bin/electrumx_server
ExecStop=/usr/local/bin/electrumx_rpc -p 8000 stop
User=electrumx
LimitNOFILE=8192
TimeoutStopSec=30min

[Install]
WantedBy=multi-user.target



sudo systemctl start electrumx_skyr

To check its status:

sudo systemctl status electrumx_skyr

To review it's logs:

sudo journalctl -f -u electrumx_skyr.service --since today





#Confirm the server is running
To issue commands to the electrum server from a local terminal use (change the transaction ID below to one valid for the chain)

echo '{"method":"blockchain.transaction.get","params":["8e3293602465cf6d234fda4a2bb13affb4b5a3fb5bd46eb11a14ed72ac1836e0", true],"id":"test"}' | nc <ELECTRUM_SERVER_IP> <ELECTRUM_TCP_PORT> -i 1 | jq .
To confirm websockets are running:

import websocket

ws = websocket.WebSocket()
ws.connect("wss://<YOUR_DOMAIN_NAME>:<ELECTRUM_WSS_PORT>")
ws.send('{"method":"blockchain.transaction.get","params":["8e3293602465cf6d234fda4a2bb13affb4b5a3fb5bd46eb11a14ed72ac1836e0", true],"id":"test"}')
print(ws.recv())
ws.close()


#Maintainence
To keep your electrum server running smoothly, it is recommended to compact the database once a week. We can do this with a crontab (opens new window)entry as below:

33 3 * * 3 sudo systemctl stop electrumx_RICK && COIN=Rick; DB_DIRECTORY=/electrumdb/RICK; /home/<USERNAME>/electrumx-1/electrumx_compact_history && sudo systemctl start electrumx_RICK
This means that every Wednesday at 3:33am, we'll stop the electrum service, compact the database, then restart the service. You should change the day of week for each of your electrum servers so that they dont all go down for maintainence at the same time.

Suggest an improvement for this page 
